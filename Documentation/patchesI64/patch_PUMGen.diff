diff --git a/src/pumgen.cpp b/src/pumgen.cpp
index 5a19c60..794f5bb 100644
--- a/src/pumgen.cpp
+++ b/src/pumgen.cpp
@@ -332,7 +332,7 @@ int main(int argc, char* argv[]) {
     checkH5Err(h5space);
 
     hid_t h5group =
-        H5Dcreate(h5file, "/group", H5T_STD_I32LE, h5space, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
+        H5Dcreate(h5file, "/group", H5T_STD_I64LE, h5space, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
     checkH5Err(h5group);
 
     start[0] = offsets[0];
@@ -343,18 +343,21 @@ int main(int argc, char* argv[]) {
     h5memspace = H5Screate_simple(1, sizes, 0L);
     checkH5Err(h5memspace);
 
-    int* group = new int[localSize[0]];
+    int64_t* group = new int64_t[localSize[0]];
     it = mesh->begin(3);
     index = 0;
     while (apf::MeshEntity* element = mesh->iterate(it)) {
       assert(mesh->hasTag(element, groupTag));
+      
+      int myGroup; 
+      mesh->getIntTag(element, groupTag, &myGroup);
+      group[index] = static_cast<int64_t>(myGroup);
 
-      mesh->getIntTag(element, groupTag, &group[index]);
       index++;
     }
     mesh->end(it);
 
-    checkH5Err(H5Dwrite(h5group, H5T_NATIVE_INT, h5memspace, h5space, h5dxlist, group));
+    checkH5Err(H5Dwrite(h5group, H5T_NATIVE_INT64, h5memspace, h5space, h5dxlist, group));
 
     checkH5Err(H5Sclose(h5space));
     checkH5Err(H5Sclose(h5memspace));
@@ -370,15 +373,15 @@ int main(int argc, char* argv[]) {
   apf::MeshTag* boundaryTag = mesh->findTag("boundary condition");
   assert(boundaryTag);
 
-  int* boundary = new int[localSize[0]];
-  memset(boundary, 0, localSize[0] * sizeof(int));
+  int64_t* boundary = new int64_t[localSize[0]];
+  memset(boundary, 0, localSize[0] * sizeof(int64_t));
 
   sizes[0] = globalSize[0];
   h5space = H5Screate_simple(1, sizes, 0L);
   checkH5Err(h5space);
 
-  hid_t h5boundary =
-      H5Dcreate(h5file, "/boundary", H5T_STD_I32LE, h5space, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
+  hid_t h5boundary = 
+      H5Dcreate(h5file, "/boundary", H5T_STD_I64LE, h5space, H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
   checkH5Err(h5boundary);
 
   start[0] = offsets[0];
@@ -397,13 +400,15 @@ int main(int argc, char* argv[]) {
 
     for (unsigned int i = 0; i < 4; i++) {
       if (mesh->hasTag(faces[i], boundaryTag)) {
-        int b;
-        mesh->getIntTag(faces[i], boundaryTag, &b);
+        int ba;
+        int64_t b;
+        mesh->getIntTag(faces[i], boundaryTag, &ba);
+        b = static_cast<int64_t>(ba);
 
-        if (b <= 0 || b > std::numeric_limits<unsigned char>::max())
+        if (b <= 0 || b > std::numeric_limits<unsigned short>::max())
           logError() << "Cannot handle boundary condition" << b;
 
-        boundary[index] += b << (i * 8);
+        boundary[index] += b << (i * 16);
       }
     }
 
@@ -411,7 +416,7 @@ int main(int argc, char* argv[]) {
   }
   mesh->end(it);
 
-  checkH5Err(H5Dwrite(h5boundary, H5T_NATIVE_INT, h5memspace, h5space, h5dxlist, boundary));
+  checkH5Err(H5Dwrite(h5boundary, H5T_NATIVE_INT64, h5memspace, h5space, h5dxlist, boundary));
 
   checkH5Err(H5Sclose(h5space));
   checkH5Err(H5Sclose(h5memspace));
