#! /usr/bin/python
##
# @file
# This file is part of SeisSol.
#
# @author Carsten Uphoff (c.uphoff AT tum.de, http://www5.in.tum.de/wiki/index.php/Carsten_Uphoff,_M.Sc.)
#
# @section LICENSE
# Copyright (c) 2015, SeisSol Group
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# @section DESCRIPTION
#

Import('env')

import os

def subdirs(directory):
  lst = [name for name in os.listdir(abs_path_dir) if os.path.isdir(os.path.join(abs_path_dir, name)) and name[0] != '.']
  lst.sort()
  return lst

def generate_code(target, source, env, for_signature):
  basePath = os.path.split(str(source[0]))[0]
  return './{} --equations {} --matricesDir {} --outputDir {} --arch {} --order {} --numberOfMechanisms {} --memLayout {} --multipleSimulations {} --dynamicRuptureMethod {} --PlasticityMethod {} --gemm_tools {}'.format(
    os.path.join(basePath, 'generate.py'),
    env['equations'],
    os.path.join(basePath, 'matrices'),
    os.path.split(str(target[0]))[0],
    env['arch'],
    env['order'],
    env['numberOfMechanisms'],
    env['memLayout'],
    env['multipleSimulations'],
    env['dynamicRuptureMethod'],
    env['PlasticityMethod'],
    env['GemmTools']
  )

env.Append(BUILDERS = {'Generate': Builder(generator=generate_code)})

yatetoDir = os.path.join(Dir('.').srcnode().abspath, 'yateto')
yatetoFiles = [os.path.join(root, f) for root, dirs, files in os.walk(yatetoDir) for f in files if f.endswith('.py')]
generated = env.Generate(['subroutine.cpp', 'subroutine.h', 'init.h', 'init.cpp', 'tensor.h', 'tensor.cpp', 'kernel.cpp', 'kernel.h', 'KernelTest.t.h'],
                         Glob('*.py') + yatetoFiles)
buildDir = '#/' + env['buildDir'] if not os.path.isabs(env['buildDir']) else env['buildDir']
env.Append(CPPPATH=buildDir)

cppFiles = filter(lambda t: str(t).endswith('.cpp'), generated)
for cpp in cppFiles:
  if str(cpp) == 'subroutine.cpp':
    removeWerror = lambda x: x.find('-Werror') < 0
    cflags = list(filter(removeWerror, env['CFLAGS']))
    cxxflags = list(filter(removeWerror, env['CXXFLAGS']))
    obj = env.Object(cpp, CFLAGS=cflags, CXXFLAGS=cxxflags + ['-mno-red-zone'])
  else:
    obj = env.Object(cpp)
  env.Depends(obj, generated)
  env.generatedSourceFiles.append(obj)

if hasattr(env, 'generatedTestSourceFiles'):
  testFiles = filter(lambda t: str(t).endswith('.t.h'), generated)
  for test in testFiles:
    env.generatedTestSourceFiles.append(test.abspath)


Export('env')
