!Switch

[mu_d]: !Include yaml_files/mud.yaml

[T_s, T_d, T_n, mu_s, cohesion]: !EvalModel
    parameters: [Ts0, Td0, mu_d, x, y, z, rake_interp_low_slip, R]
    model: !Switch
        [Ts0, Td0]: !Include yaml_files/Ts0Td0.yaml
        [mu_d]: !Include yaml_files/mud.yaml
        [rake_interp_low_slip]: !Include 'yaml_files/FL33_34_fault.yaml'
        [x, y, z]: !AffineMap
          matrix:
            x: [1.0, 0.0, 0.0]
            y: [0.0, 1.0, 0.0]
            z: [0.0, 0.0, 1.0]
          translation:
            x: 0.0
            y: 0.0
            z: 0.0
{{ R_yaml_block }}
    components: !LuaMap
      returns: [T_s, T_d, T_n, cohesion, mu_s]
      function: |
       function f (x)

        -- ensure R>0.8 in the nucleation region
        xha = {0, 0, {{ hypo_z }}}
        r_crita = {{ r_crit }}
        ra = math.sqrt((x['x']-xha[1])^2 + (x['y']-xha[2])^2 + (x['z']-xha[3])^2 )
        coh0 = -{{ cohesion_const }}
        cohn = 0.0
        R = x["R"]
        if (ra <= r_crita) then
          coh0 = cohn
        elseif (ra <= r_crita + 1000) then
          xi =  (ra - r_crita)/1000
          coh0 = cohn * xi + (1-xi) * coh0
        end

        T_n = math.min(-10^6, 0.15*2700*9.8*x['z'])
        sigma_n = math.abs(T_n)

        depthIncreasingCohesion = 6000.0
        cohesion = coh0  -{{ cohesion_lin }} * math.max(0, (x['z'] + depthIncreasingCohesion) / depthIncreasingCohesion)

        T_s = math.cos(x['rake_interp_low_slip']) * x['mu_d']*sigma_n - {{ B }} * x['Ts0']
        T_d = math.sin(x['rake_interp_low_slip']) * x['mu_d']*sigma_n - {{ B }} * x['Td0']
        Tau0 =  math.sqrt(T_s^2 + T_d^2)
        mu_smax = 1.5
        Tau0_max = sigma_n * ( x['mu_d'] + (mu_smax - x['mu_d'] - cohesion/sigma_n) * R)
        if (Tau0 > Tau0_max) then
          T_s = T_s * Tau0_max/Tau0
          T_d = T_d * Tau0_max/Tau0
          Tau0 =  math.sqrt(T_s^2 + T_d^2)
        end
        mu_s =  x['mu_d'] + math.max(0.01, (Tau0/sigma_n - x['mu_d'])/R + cohesion/sigma_n)
        return {
          T_s = T_s,
          T_d = T_d,
          T_n = T_n,
          cohesion = cohesion,
          mu_s = mu_s
        }
        end


[Tnuc_n, Tnuc_s, Tnuc_d]: !ConstantMap
  map:
    Tnuc_n: 0
    Tnuc_s: 0
    Tnuc_d: 0


[d_c]: !EvalModel
    parameters: [fault_slip]
    model: !Switch
        [fault_slip]: !Include yaml_files/fault_slip.yaml
    components: !LuaMap
      returns: [d_c]
      function: |
       function f (x)
        return {
          d_c =  math.max({{ min_dc }}, x["fault_slip"] * {{ C }});
        }
        end

[forced_rupture_time]: !LuaMap
  returns: [forced_rupture_time]
  function: |
      function f (x)
        xha = {0, 0, {{ hypo_z }}}
        r_crita = {{ r_crit }}
        ra = math.sqrt((x["x"]-xha[1])^2 + (x["y"]-xha[2])^2 + (x["z"]-xha[3])^2 )
        Vs = 3464.0
        if (ra <= r_crita) then
          forced_rupture_time = ra/(0.7*Vs)+(0.081*r_crita/(0.7*Vs))*(1.0/(1.0-(ra/r_crita)^2)-1.0)
        else
          forced_rupture_time = 1000000000.0
        end
        return {
          forced_rupture_time = forced_rupture_time
        }
      end
