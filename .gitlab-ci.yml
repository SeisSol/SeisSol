stages:
    - pre_build
    - build 
    - test


ci_builder_pre:
    stage: pre_build
    tags:
        - ci_testing_cc
    before_script:
        - git branch -vva
        - echo $commit_author_name
    script:
        - echo "checking availability of ci_testing_cc"
        - git --version


ci_builder_build:
    stage: build
    tags:
        - ci_testing_cc
    before_script:
        - cat .git/config
        - sed -i 's/\.\.\/\.\./https\:\/\/github\.com/g' .gitmodules
        - git submodule sync
        - git submodule --quiet update --init --recursive 
        - wget -q https://syncandshare.lrz.de/dl/fiJNAokgbe2vNU66Ru17DAjT/netcdf-4.6.1.tar.gz
        - wget -q https://github.com/hfp/libxsmm/archive/master.zip
        - sudo apt-get install gcc-8 g++-8 gfortran-8
        - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100
        - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100
        - sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-8 100
        - sudo apt-get install -qq --yes openmpi-bin openmpi-common libopenmpi-dev hdf5-tools libhdf5-openmpi-dev python3 python3-pip libmetis-dev libparmetis-dev cxxtest
        - gfortran --version
        - pip3 install --upgrade pip
        - pip3 install 'numpy>=1.12.0'
        - pip3 install lxml
        - pip3 install setuptools
        - pip3 install sphinx
        - pip3 install sphinx_rtd_theme
        - cd netcdf-4.6.1 && CC=h5pcc ./configure --prefix=/usr --enable-shared=no --disable-dap && make && sudo make install && cd ..
        - unzip master.zip
        - cd libxsmm-master && make generator && sudo cp bin/libxsmm_gemm_generator /usr/bin && cd ..
    script:
        - echo "now building"
        - cat .git/config
        - echo $CI_REGISTRY $CI_REGISTRY_IMAGE $CI_REGISTRY_USER
        - git submodule update --init --recursive
        - cmake --version
        - set -euo pipefail
        - export IFS=$'\n\t'
        - export CTEST_OUTPUT_ON_FAILURE=1
        - equation=elastic
        - mechanisms=0
        - for precision in single double ; 
            do for build_type in Release Debug ; 
                do for equation in elastic viscoelastic2 ;
                    do dirname="build_${equation}_${precision}_${build_type}";
                    echo "mkdir $dirname";
                    if [ "$equation" = viscoelastic2 ]; then mechanisms=3; else mechanisms=0; fi;
                    mkdir -p $dirname && cd $dirname ;
                    pwd; 
                    CMAKE_PREFIX_PATH=~ ;
                    cmake ..
                    -DNETCDF=OFF
                    -DMETIS=ON
                    -DCOMMTHREAD=ON
                    -DASAGI=OFF
                    -DHDF5=ON
                    -DCMAKE_BUILD_TYPE=$build_type
                    -DTESTING=ON -DLOG_LEVEL=warning
                    -DLOG_LEVEL_MASTER=info
                    -DARCH=hsw
                    -DPRECISION=$precision
                    -DEQUATIONS=$equation
                    -DNUMBER_OF_MECHANISMS=$mechanisms
                    -DGEMM_TOOLS_LIST=LIBXSMM ;
                    make -j $(nproc);
                    cd .. ; 
                  done;
             done; 
          done;
          
    artifacts:
        paths:
            - build_*


ci_builder_test:
        stage: test
        tags:
            - ci_testing_cc
        script: 
            - echo "echo testing"
            - cd build_elastic_double_Release
            - make test
            - cd ../build_elastic_single_Release
            - make test
            - cd ../build_elastic_double_Debug
            - make test
            - cd ../build_elastic_single_Debug
            - make test
            - cd ../build_viscoelastic2_double_Release
            - make test
            - cd ../build_viscoelastic2_double_Debug
            - make test


gpu_pre_build:
    stage: pre_build
    tags:
        - atsccs68-docker-executor
    image:
        name: ravilmobile/seissol_base_amd64:ubuntu-1804_gcc-8.3.0_openmpi-3.1.5_cuda-10.1.243
        entrypoint: [""]
    before_script:
        - git branch -vva
        - echo $commit_author_name
    script:
        - echo "HOST arch.:" $HOST
        - echo "GPU vendor:" $GPU_VENDOR ", GPU model:" $GPU_MODEL
        - nvidia-smi
        - cat .gitmodules
        - sed -i 's/\.\.\/\.\./https\:\/\/github\.com/g' .gitmodules
        - git submodule sync
        - cat .git/config
        - git submodule update --init --recursive

    artifacts:
        paths:
            - submodules


gpu_build:
    stage: build
    tags:
        -  atsccs68-docker-executor
    allow_failure: false
    image:
        name: ravilmobile/seissol_base_amd64:ubuntu-1804_gcc-8.3.0_openmpi-3.1.5_cuda-10.1.243
        entrypoint: [""]
    script:
        - export CTEST_OUTPUT_ON_FAILURE=1
        - . /opt/spack-environment/seissol_env.sh
        - . /opt/spack-environment/cuda_env.sh
        - pip3 install git+https://github.com/ravil-mobile/gemmforge.git
        - set -euo pipefail
        - git submodule update --init --recursive
        - for precision in double single; do
            mkdir -p ./build_${precision} && cd ./build_${precision} ;
            cmake ..
            -DCMAKE_BUILD_TYPE=Release
            -DDEVICE_ARCH=${GPU_VENDOR}
            -DDEVICE_SUB_ARCH=${GPU_MODEL}
            -DHOST_ARCH=${HOST}
            -DPRECISION=${precision} ;
            make -j ;
            cd .. ;
          done;
        - set +u
    artifacts:
        paths:
            - build_*


gpu_convergence_test:
    stage: test
    tags:
        -  atsccs68-docker-executor
    allow_failure: false
    image:
        name: ravilmobile/seissol_base_amd64:ubuntu-1804_gcc-8.3.0_openmpi-3.1.5_cuda-10.1.243
        entrypoint: [""]
    script:
        - export CTEST_OUTPUT_ON_FAILURE=1
        - . /opt/spack-environment/seissol_env.sh
        - . /opt/spack-environment/cuda_env.sh
        - git clone https://github.com/SeisSol/Examples.git tests
        - pip3 install -r ./tests/convergence_elastic/requirements.txt
        - set -euo pipefail
        - for precision in double single; do
            cd ./build_${precision} ;
            echo "Elastic Convergence test with precision - " ${precision} ;
            cp -r ../tests/convergence_elastic/* . ;
            PYTHONPATH=$PWD python3 ./elastic_convergence_runner
            --executable $PWD/SeisSol_Release_?nvidia_?_elastic
            --tmp-dir /tmp/seissol
            --sizes 4 8 16
            --expected-errors 1e-2 1e-4 5e-5
            --norm-type LInf
            --end-time 0.5
            --allow-run-as-root ;
            cd .. ;
          done;
        - set +u


gpu_performance_test:
    stage: test
    tags:
        -  atsccs68-docker-executor
    allow_failure: false
    image:
        name: ravilmobile/seissol_base_amd64:ubuntu-1804_gcc-8.3.0_openmpi-3.1.5_cuda-10.1.243
        entrypoint: [""]
    script:
        - export CTEST_OUTPUT_ON_FAILURE=1
        - . /opt/spack-environment/seissol_env.sh
        - . /opt/spack-environment/cuda_env.sh
        - set -euo pipefail
        - for precision in double single; do
            echo "Running SeiSol proxy with precision - " ${precision} ;
            cd ./build_${precision} ;
            ./SeisSol_proxy_Release_?${GPU_VENDOR}_?_elastic 100000 100 all ;
            cd .. ;
          done;
        - set +u
