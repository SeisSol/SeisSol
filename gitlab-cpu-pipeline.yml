stages:
    - pre_build
    - build 
    - test
    - check
    - performance_eval
        
ci_builder_pre:
    stage: pre_build
    tags:
        - ci_testing_cc
    variables:
        GIT_STRATEGY: clone
    before_script:
        - git branch -vva
        - echo $commit_author_name
    script:
        - echo "checking availability of ci_testing_cc"
        - git --version
        - git submodule set-url submodules/xdmfwriter https://github.com/TUM-I5/XdmfWriter.git
        - git submodule set-url submodules/cxxtest https://github.com/CxxTest/cxxtest.git
        - git submodule set-url submodules/utils https://github.com/TUM-I5/utils.git
        - git submodule set-url submodules/async https://github.com/TUM-I5/ASYNC.git
        - git submodule set-url submodules/scons-tools https://github.com/TUM-I5/scons-tools.git
        - git submodule set-url submodules/PUML https://github.com/TUM-I5/PUML2.git
        - git submodule set-url submodules/yateto https://github.com/SeisSol/yateto.git
        - git submodule set-url submodules/eigen3 https://github.com/eigenteam/eigen-git-mirror
        - git submodule set-url submodules/Device https://github.com/SeisSol/Device.git
        - git submodule set-url submodules/fty https://github.com/ravil-mobile/fty.git
        - git submodule --quiet update --init --recursive
        - wget -q https://syncandshare.lrz.de/dl/fiJNAokgbe2vNU66Ru17DAjT/netcdf-4.6.1.tar.gz
        - wget -q -O libxsmm-1.17.zip https://github.com/libxsmm/libxsmm/archive/refs/tags/1.17.zip
        - sudo apt-get install -qq --yes gcc-8 g++-8 gfortran-8 pkg-config cmake cmake-data 
        - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100
        - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100
        - sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-8 100
        - sudo apt-get install -qq --yes unzip openmpi-bin openmpi-common libopenmpi-dev hdf5-tools libhdf5-openmpi-dev python3 python3-pip libmetis-dev libparmetis-dev cxxtest libarmadillo-dev libyaml-cpp-dev
        - gfortran --version
        - pip3 install --upgrade pip
        - pip3 install 'numpy>=1.12.0'
        - pip3 install pandas
        - pip3 install lxml
        - pip3 install setuptools
        - pip3 install sphinx
        - pip3 install sphinx_rtd_theme
        - pip3 install 'seissolxdmf>=0.1.0'
        - tar -xzf netcdf-4.6.1.tar.gz
        - cd netcdf-4.6.1 && CC=h5pcc ./configure --prefix=/usr --enable-shared=no --disable-dap && make && sudo make install && cd ..
        - unzip libxsmm-1.17.zip
        - cd libxsmm-1.17 && make generator && sudo cp bin/libxsmm_gemm_generator /usr/bin && cd ..
        - git clone https://github.com/uphoffc/ImpalaJIT.git &&
          mkdir -p ImpalaJIT/build && cd ImpalaJIT/build && cmake .. && make -j $(nproc) &&
          sudo make install && cd ../.. && rm -rf ./ImpalaJIT
        - git clone --depth 1 https://github.com/SeisSol/easi.git &&
          mkdir -p easi/build && cd easi/build && cmake -DASAGI=OFF -DIMPALAJIT=ON .. &&
          make -j $(nproc) && sudo make install  && cd ../.. && rm -rf ./easi
        
ci_builder_build:
    stage: build
    tags:
        - ci_testing_cc
    needs:
        - job: ci_builder_pre
    before_script:
        - pwd
        - cat .git/config
    parallel:
        matrix:
             - precision: double
             - precision: single
    script:
        - echo "now building"
        - echo $CI_REGISTRY $CI_REGISTRY_IMAGE $CI_REGISTRY_USER
        - cmake --version
        - set -euo pipefail
        - export IFS=$'\n\t'
        - export CTEST_OUTPUT_ON_FAILURE=1
        - equation=elastic
        - mechanisms=0
        - for build_type in Release ; 
             do for equation in elastic ;
                 do dirname="build_${equation}_${precision}_${build_type}";
                 echo "mkdir $dirname";
                 if [ "$equation" = viscoelastic2 ]; then mechanisms=3; else mechanisms=0; fi;
                 mkdir -p $dirname && cd $dirname ;
                 pwd; 
                 CMAKE_PREFIX_PATH=~ ;
                 cmake 
                 -DNETCDF=OFF
                 -DMETIS=ON
                 -DCOMMTHREAD=ON
                 -DASAGI=OFF
                 -DHDF5=ON
                 -DCMAKE_BUILD_TYPE=$build_type
                 -DTESTING=ON
                 -DLOG_LEVEL=warning
                 -DLOG_LEVEL_MASTER=info
                 -DHOST_ARCH=hsw
                 -DPRECISION=$precision
                 -DEQUATIONS=$equation
                 -DNUMBER_OF_MECHANISMS=$mechanisms
                 -DDR_QUAD_RULE=stroud 
                 -DGEMM_TOOLS_LIST=LIBXSMM 
                 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. ;
                 make -j $(nproc);
                 cd .. ; 
             done; 
          done;
          
    artifacts:
        paths:
            - build_*
            
ci_builder_test:
        stage: test
        tags:
            - ci_testing_cc
        allow_failure: true
        needs:
            - job: ci_builder_build
        parallel:
            matrix:
                - DIR: build_elastic_double_Release
                - DIR: build_elastic_single_Release
        script: 
            - echo "testing"
            - pwd
            - ls
            - cd $DIR
            - make test


tpv_run:
    stage: test
    tags:
        - ci_testing_cc
    allow_failure: false
    needs:
        - job: ci_builder_build
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 16, 101, 101-slip, 104, 105, 33, 34]
    script: 
        - echo "run TPV${tpv}"
        - git clone https://github.com/7bits-register/precomputed-seissol.git
        - ls
        - cd build_elastic_${precision}_Release
        - cp -r ../precomputed-seissol/tpv${tpv}/* .
        - ls
        - mkdir ./output
        - export NUM_COMP_CORES=$(expr $(nproc) - 1)
        - export OMP_NUM_THREADS=$NUM_COMP_CORES
        - export OMP_PLACES="cores($NUM_COMP_CORES)"
        - ulimit -Ss unlimited
        - ./SeisSol_Release_*_elastic ./parameters.par
        - mv ./precomputed/${precision} ./output/precomputed
        - mv ./output ../output-tpv{$tpv}-${precision}
    artifacts:
        paths:
            - output-*


tpv_check_faultoutput:
    stage: check
    tags:
        - ci_testing_cc
    allow_failure: false
    needs:
        - job: tpv_run
    variables:
        elastic_domain_file: "tpv.xdmf"
        fault_file: "tpv-fault.xdmf"
        epsilon: "0.05"
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 16, 101, 101-slip, 104, 105, 33, 34]
    script: 
        - echo "check TPV{$tpv}"
        - ls
        - cd output-tpv{$tpv}-${precision}
        - ls
        - python3 ../postprocessing/validation/compare-faults/compare.py ./${fault_file} ./precomputed/${fault_file} --epsilon ${epsilon}


tpv_check_receivers:
    stage: check
    tags:
        - ci_testing_cc
    allow_failure: false
    needs:
        - job: tpv_run
    variables:
        epsilon: "0.05"
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 101, 101-slip, 104, 105, 33, 34]
    script: 
        - echo "check TPV${tpv}"
        - ls
        - cd output-tpv{$tpv}-${precision}
        - ls
        - if [ ${tpv} = 5 ]; then mode=lsw; elif [ ${tpv} = 105 ]; then mode=tp; else mode=rs; fi;
          python3 ../postprocessing/validation/compare-receivers/compare.py . ./precomputed --epsilon ${epsilon} --mode $mode
