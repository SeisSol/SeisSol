default:
    tags:
        - lrzcc-k8s-4cores-10gb 
    image:
        name: $CI_REGISTRY_USER/$cpu_image_name:$cpu_image_version
        entrypoint: [""]

variables:
    HOST: "hsw"

stages:
    - pre_build
    - build 
    - test
    - check
        
fetch_submodules:
    stage: pre_build
    variables:
        GIT_STRATEGY: clone
    before_script:
        - git branch -vva
        - echo $commit_author_name
    script:
        - git submodule init
        - sed -i 's/\.\.\/\.\./https\:\/\/github\.com/g' .gitmodules
        - git submodule sync
        - git submodule update --init --recursive
    artifacts:
        paths:
            - submodules
        
build_seissol:
    stage: build
    needs:
        - job: fetch_submodules
    parallel:
        matrix:
        - precision: [double, single]
          build_type: [Debug, Release]
    script:
        - cmake --version
        - equation=elastic
        - mechanisms=0
        - for equation in elastic ;
            do dirname="build_${equation}_${precision}_${build_type}";
            echo "mkdir $dirname";
            if [ "$equation" = viscoelastic2 ]; then mechanisms=3; else mechanisms=0; fi;
            mkdir -p $dirname && cd $dirname ;
            pwd;
            CMAKE_PREFIX_PATH=~ ;
            cmake ..
            -DNETCDF=OFF
            -DMETIS=ON
            -DCOMMTHREAD=ON
            -DASAGI=OFF
            -DHDF5=ON
            -DCMAKE_BUILD_TYPE=$build_type
            -DTESTING=ON
            -DLOG_LEVEL=warning
            -DLOG_LEVEL_MASTER=info
            -DHOST_ARCH=${HOST}
            -DPRECISION=$precision
            -DEQUATIONS=$equation
            -DNUMBER_OF_MECHANISMS=$mechanisms
            -DDR_QUAD_RULE=stroud
            -DGEMM_TOOLS_LIST=LIBXSMM
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON;
            make -j $(nproc);
            cd .. ;
          done;
          
    artifacts:
        paths:
            - build_*
            
run_unit_tests:
    stage: test
    allow_failure: true
    needs:
        - job: build_seissol
    parallel:
        matrix:
            - DIR: build_elastic_double_Debug
            - DIR: build_elastic_single_Debug
            - DIR: build_elastic_double_Release
            - DIR: build_elastic_single_Release
    script: 
        - echo "testing"
        - pwd
        - ls
        - cd $DIR
        - export CTEST_OUTPUT_ON_FAILURE=1
        - make test

run_tpv:
    stage: test
    allow_failure: false
    needs:
        - job: build_seissol
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 5-nuc, 6, 16, 101, 101-slip, 104, 105, yoffe, gaussian]
    script: 
        - echo "run TPV${tpv}"
        - git clone https://github.com/7bits-register/precomputed-seissol.git
        - ls
        - cd precomputed-seissol
        - git checkout 64fd94e
        - cd ..
        - cd build_elastic_${precision}_Release
        - cp -r ../precomputed-seissol/tpv${tpv}/* .
        - ls
        - mkdir ./output
        - export NUM_COMP_CORES=$(expr $(nproc) - 1)
        - export OMP_NUM_THREADS=$NUM_COMP_CORES
        - export OMP_PLACES="cores($NUM_COMP_CORES)"
        - ulimit -Ss unlimited
        - ./SeisSol_Release_*_elastic ./parameters.par
        - mv ./precomputed/${precision} ./output/precomputed
        - mv ./output ../output-tpv{$tpv}-${precision}
    artifacts:
        paths:
            - output-*


check_faultoutput:
    stage: check
    allow_failure: false
    needs:
        - job: run_tpv
    variables:
        elastic_domain_file: "tpv.xdmf"
        fault_file: "tpv-fault.xdmf"
        epsilon: "0.05"
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 5-nuc, 6, 16, 101, 101-slip, 104, 105, yoffe, gaussian]
    script: 
        - echo "check TPV{$tpv}"
        - ls
        - cd output-tpv{$tpv}-${precision}
        - ls
        - python3 ../postprocessing/validation/compare-faults.py ./${fault_file} ./precomputed/${fault_file} --epsilon ${epsilon}


check_receivers:
    stage: check
    allow_failure: false
    needs:
        - job: run_tpv
    variables:
        epsilon: "0.05"
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 5-nuc, 6, 101, 101-slip, 104, 105, yoffe, gaussian]
    script: 
        - echo "check TPV${tpv}"
        - ls
        - cd output-tpv{$tpv}-${precision}
        - ls
        - if [ ${tpv} = 5 ] || [ ${tpv} = 5-nuc ] || [ ${tpv} = 6 ] || [ ${tpv} = 16 ]; then mode=lsw; elif [ ${tpv} = 105 ]; then mode=tp; else mode=rs; fi;
          python3 ../postprocessing/validation/compare-receivers.py . ./precomputed --epsilon ${epsilon} --mode $mode


check_energies:
    stage: check
    allow_failure: false
    needs:
        - job: run_tpv
    variables:
        energy_file: "tpv-energy.csv"
        epsilon: "0.05"
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 5-nuc, 6, 16, 101, 101-slip, 104, 105, yoffe, gaussian]
    script: 
        - echo "check TPV${tpv}"
        - ls
        - cd output-tpv{$tpv}-${precision}
        - ls
        - python3 ../postprocessing/validation/compare-energies.py ./${energy_file} ./precomputed/${energy_file} --epsilon ${epsilon}
