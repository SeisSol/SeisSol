default:
    image:
        name: $CI_REGISTRY_USER/$cpu_image_name:$cpu_image_version
        entrypoint: [""]

variables:
    HOST: "hsw"

stages:
    - pre_build
    - build 
    - test
    - check
        
fetch_submodules:
    stage: pre_build
    tags:
        - sccs
        - helper
    variables:
        GIT_STRATEGY: clone
    before_script:
        - git branch -vva
        - echo $commit_author_name
    script:
        - git submodule init
        - sed -i 's/\.\.\/\.\./https\:\/\/github\.com/g' .gitmodules
        - git submodule sync
        - git submodule update --init --recursive
    artifacts:
        paths:
            - submodules
        expire_in: 2 days
    retry: 2
        
build_seissol:
    stage: build
    tags:
        - sccs
        - build
    needs:
        - job: fetch_submodules
    parallel:
        matrix:
        - precision: [double, single]
          build_type: [Debug, Release]
          equation: [elastic, anisotropic, poroelastic, viscoelastic2]
    script:
        - cmake --version
        - pip3 install pyyaml
        - mechanisms=0
        - dirname="build_${equation}_${precision}_${build_type}";
          if [ "$equation" = viscoelastic2 ] && [ "$build_type" == Debug ]; then echo "Skip ${dirname}" && exit 0; fi;
          if [ "$equation" = anisotropic ] && [ "$build_type" == Debug ]; then echo "Skip ${dirname}" && exit 0; fi;
          if [ "$equation" = poroelastic ] && [ "$build_type" == Debug ]; then echo "Skip ${dirname}" && exit 0; fi;
          if [ "$equation" = viscoelastic2 ]; then mechanisms=3; else mechanisms=0; fi;
          echo "mkdir $dirname";
          mkdir -p $dirname && cd $dirname ;
          pwd;
          CMAKE_PREFIX_PATH=~ ;
          cmake ..
          -DNETCDF=ON
          -DMETIS=ON
          -DCOMMTHREAD=OFF
          -DASAGI=OFF
          -DHDF5=ON
          -DCMAKE_BUILD_TYPE=$build_type
          -DTESTING=ON
          -DLOG_LEVEL=warning
          -DLOG_LEVEL_MASTER=info
          -DHOST_ARCH=${HOST}
          -DPRECISION=$precision
          -DEQUATIONS=$equation
          -DNUMBER_OF_MECHANISMS=$mechanisms
          -DDR_QUAD_RULE=stroud
          -DGEMM_TOOLS_LIST=LIBXSMM
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON;
          make -j $(nproc);
          cd .. ;
          
    artifacts:
        paths:
            - build_*
        expire_in: 2 days
    retry: 2
            
run_unit_tests:
    stage: test
    allow_failure: true
    tags:
        - sccs
        - cpu-hsw
    needs:
        - job: build_seissol
    parallel:
        matrix:
            - DIR: build_elastic_double_Debug
            - DIR: build_elastic_single_Debug
            - DIR: build_elastic_double_Release
            - DIR: build_elastic_single_Release
            - DIR: build_anisotropic_double_Release
            - DIR: build_anisotropic_single_Release
            - DIR: build_poroelastic_double_Release
            - DIR: build_poroelastic_single_Release
            - DIR: build_viscoelastic2_double_Release
            - DIR: build_viscoelastic2_single_Release
    script: 
        - echo "testing"
        - pwd
        - ls
        - cd $DIR
        - export CTEST_OUTPUT_ON_FAILURE=1
        - make test
    retry: 2

run_tpv:
    stage: test
    allow_failure: false
    tags:
        - sccs
        - cpu-hsw
    needs:
        - job: build_seissol
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 5-nuc, 5-poro, 5-visco, 6, 13, 16, 101, 101-slip, 104, 105, ahsp, yoffe, gaussian]
    script: 
        - echo "run TPV${tpv}"
        - git clone https://github.com/SeisSol/precomputed-seissol.git
        - ls
        - cd precomputed-seissol
        - git checkout 2ae63167d0c5e35cb01c56198dba94a2b7a224d9
        - cd ..
        - export equations=elastic
        - if [ "$tpv" = ahsp ]; then equations=anisotropic; fi;
        - if [ "$tpv" = 5-poro ]; then equations=poroelastic; fi;      
        - if [ "$tpv" = 5-visco ]; then equations=viscoelastic2; fi;
        - cd build_${equations}_${precision}_Release
        - cp -r ../precomputed-seissol/tpv${tpv}/* .
        - ls
        - mkdir ./output
        - export NUM_COMP_CORES=$(expr $(nproc) - 1)
        - export OMP_NUM_THREADS=$NUM_COMP_CORES
        - export OMP_PLACES="cores($NUM_COMP_CORES)"
        - ulimit -Ss unlimited
        - ./SeisSol_Release_*_${equations} ./parameters.par
        - mv ./precomputed/${precision} ./output/precomputed
        - mv ./output ../output-tpv{$tpv}-${precision}
    artifacts:
        paths:
            - output-*
        expire_in: 2 days
    retry: 2


check_faultoutput:
    stage: check
    allow_failure: false
    tags:
        - sccs
        - helper
    needs:
        - job: run_tpv
    variables:
        elastic_domain_file: "tpv.xdmf"
        fault_file: "tpv-fault.xdmf"
        epsilon: "0.05"
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 5-nuc, 5-poro, 5-visco, 6, 13, 16, 101, 101-slip, 104, 105, yoffe, gaussian]
    script: 
        - echo "check TPV{$tpv}"
        - ls
        - cd output-tpv{$tpv}-${precision}
        - ls
        - python3 ../postprocessing/validation/compare-faults.py ./${fault_file} ./precomputed/${fault_file} --epsilon ${epsilon}
    retry: 2


check_receivers:
    stage: check
    allow_failure: false
    tags:
        - sccs
        - helper
    needs:
        - job: run_tpv
    variables:
        epsilon: "0.05"
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 5-nuc, 5-poro, 5-visco, 6, 13, 101, 101-slip, 104, 105, ahsp, yoffe, gaussian]
    script: 
        - echo "check TPV${tpv}"
        - ls
        - cd output-tpv{$tpv}-${precision}
        - ls
        - if [ ${tpv} = 5 ] || [ ${tpv} = 5-nuc ] || [ ${tpv} = 6 ] || [ ${tpv} = 16 ]; then mode=lsw; elif [ ${tpv} = 105 ]; then mode=tp; else mode=rs; fi;
          python3 ../postprocessing/validation/compare-receivers.py . ./precomputed --epsilon ${epsilon} --mode $mode
    retry: 2


check_energies:
    stage: check
    allow_failure: false
    tags:
        - sccs
        - helper
    needs:
        - job: run_tpv
    variables:
        energy_file: "tpv-energy.csv"
        epsilon: "0.05"
    parallel:
        matrix:
            - precision: [double, single]
              tpv: [5, 5-nuc, 5-poro, 5-visco, 6, 13, 16, 101, 101-slip, 104, 105, yoffe, gaussian]
    script: 
        - echo "check TPV${tpv}"
        - ls
        - cd output-tpv{$tpv}-${precision}
        - ls
        - python3 ../postprocessing/validation/compare-energies.py ./${energy_file} ./precomputed/${energy_file} --epsilon ${epsilon}
    retry: 2
